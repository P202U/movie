// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String          @id @default(uuid())
  username     String          @unique
  email        String          @unique
  password     String
  role         Role            @default(USER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  reviews      Review[] // admin only
  ratings      Rating[] // by users for movies
  requests     ReviewRequest[] // by the user for admin reviews
  reviewRating ReviewRating[] // by users for reviews

  @@index([email])
}

model Movie {
  id            String          @id @default(uuid())
  title         String
  description   String?
  imgUrl        String          @default("")
  reviews       Review[] // by admin
  ratings       Rating[] // by users
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reviewRequest ReviewRequest[] // from users for admin reviews

  @@index([title])
}

// by admins for movies
model Review {
  id        String   @id @default(uuid())
  movieId   String
  userId    String
  content   String
  rating    Float // rating for the review (adminâ€™s rating of the movie)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movie        Movie          @relation(fields: [movieId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  reviewRating ReviewRating[]

  @@index([movieId])
  @@index([userId])
}

// storing ratings that users give to movies
model Rating {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  value     String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Ensure a user can rate a movie only once
  @@index([userId])
  @@index([movieId])
}

// storing ratings that users give to reviews
model ReviewRating {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  value     String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId]) // Ensure a user can rate a review only once
  @@index([userId])
  @@index([reviewId])
}

// storing review requests made by users for movies
model ReviewRequest {
  id        String        @id @default(uuid())
  userId    String? // Optional userId for unauthenticated users
  movieId   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user  User? @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@index([movieId])
  @@index([userId])
}
