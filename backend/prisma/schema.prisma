// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String          @id @default(uuid())
  username  String          @unique
  email     String          @unique
  password  String
  role      Role            @default(USER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  requests  ReviewRequest[] // by  the user for admin reviews
  ratings   Rating?
  comments  Comment[]

  @@index([email])
}

model Movie {
  id          String    @id @default(uuid())
  title       String
  releaseYear String
  description String
  category    String
  genre       String[]  @default([])
  imgUrl      String
  review      String
  adminRating Float     @default(0)
  ratings     Rating[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([title])
}

// storing ratings that users give to movies
model Rating {
  id        String   @id @default(uuid())
  userId    String   @unique
  movieId   String
  value     Float
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  // Composite unique constraint: ensures a user can rate a movie only once
  @@unique([userId, movieId])
  @@index([userId])
  @@index([movieId])
}

// storing review requests made by users for movies
model ReviewRequest {
  id          String        @id @default(uuid())
  userId      String? // Optional userId for unauthenticated users
  movieName   String
  releaseYear String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Comments by users on a movie
model Comment {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  parentId  String?

  user    User      @relation(fields: [userId], references: [id])
  movie   Movie     @relation(fields: [movieId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([movieId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}
